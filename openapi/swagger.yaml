definitions: {}
info:
  contact:
    email: cdis@uchicago.edu
  description: The Gen3 WTS acts as an OIDC client which acts on behalf of users to request refresh tokens from Fence. The code is available on [GitHub](https://github.com/uc-cdis/workspace-token-service).
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://cdis.uchicago.edu/terms/
  title: Workspace Token Service
  version: '1.0'
paths:
  /_status:
    get:
      summary: Health check endpoint
      tags:
      - system
      responses:
        '200':
          description: Healthy
        default:
          description: Unhealthy
  /oauth2/connected:
    get:
      summary: Check if user is connected and has a valid token
      tags:
      - auth
      parameters:
      - name: idp
        type: string
        in: query
        description: unique ID of a configured IDP
        required: false
        default: 'default'
      responses:
        '200':
          description: OK
        '403':
          description: User is not logged in, not connected with WTS or token is expired
  /oauth2/authorization_url:
    get:
      summary: Provide a redirect to the authorization endpoint from the OP
      tags:
      - auth
      parameters:
      - description: redirect URL (must start with "/" - we only support relative redirect)
        in: query
        name: redirect
        type: string
      - name: idp
        type: string
        in: query
        description: unique ID of a configured IDP
        required: false
        default: 'default'
      responses:
        '302':
          description: Redirect
        '400':
          description: User error
  /oauth2/authorize:
    get:
      summary: Send a token request to the OP
      description: Will use the session-stored IDP parameter
      tags:
      - auth
      responses:
        '200':
          description: OK
        '302':
          description: Redirect
  /oauth2/logout:
    get:
      summary: Log out the user by revoking the refresh token if provided
      tags:
      - auth
      responses:
        '204':
          description: OK
        '400':
          description: Failed to revoke token
  /token:
    get:
      summary: Get an access token
      tags:
      - auth
      parameters:
      - description: number of seconds
        in: query
        name: expires
        type: integer
      - name: idp
        type: string
        in: query
        description: unique ID of a configured IDP
        required: false
        default: 'default'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              token:
                type: string
        '400':
          description: User error
  /external_oidc:
    get:
      summary: List the configured identity providers
      description: >
        List the configured identity providers and their configuration
        details, including in how long the refresh token for the
        currently logged in user will expire (or "null" if there is no refresh
        token, or if it's already expired)
      tags:
      - auth
      parameters:
      - name: unexpired
        in: query
        type: boolean
        description: Only return IDPs for which the currently logged in user has a valid refresh token.
        required: false
        default: 'false'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              providers:
                type: array
                items:
                  type: object
                  properties:
                    base_url:
                      type: string
                    idp:
                      type: string
                    name:
                      type: string
                    refresh_token_expiration:
                      type: string
                    urls:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          url:
                            type: string
  /aggregate/{endpoint}:
    get:
      summary: Proxy GET requests to `endpoint` on each linked commons and return an aggregated response
      description: >
        For an authenticated request, each proxied request incudes an access token fetched using the current user's refresh token.


        All url query parameters except `filters` are passed along to `endpoint`.


        `GET /aggregate/user/user?filters=authz&filters=username` could be used to return the example response below.
      tags:
      - aggregation
      parameters:
      - name: endpoint
        required: true
        in: path
        description: The endpoint to proxy to for each linked commons
        type: string
      - name: filters
        in: query
        type: array
        description: >
          To reduce the size of the aggregated response body, only return
          JSON key-value pairs whose key is in filters. Multiple filters
          can be specified by repeating the filters in the URL
        required: false
        default: []
        items:
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              brh.data-commons.org:
                type: object
                properties:
                  authz:
                    type: object
                    properties:
                      /programs/DEV/projects/test:
                        type: array
                        items:
                          type: object
                          properties:
                            method:
                              type: string
                            service:
                              type: string
                  username:
                    type: string
              gen3.theanvil.io:
                type: object
                properties:
                  authz:
                    type: object
                    properties:
                      /open:
                        type: array
                        items:
                          type: object
                          properties:
                            method:
                              type: string
                            service:
                              type: string
                  username:
                    type: string
swagger: '2.0'
